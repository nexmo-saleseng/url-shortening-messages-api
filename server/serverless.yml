# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: nexmo-sms-shortener # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    DYNAMODB_TABLE: ${file(config.json):DYNAMODB_TABLE}
    NEXMO_API_KEY: ${file(config.json):NEXMO_API_KEY}
    NEXMO_API_SECRET: ${file(config.json):NEXMO_API_SECRET}
    NEXMO_SMS_FROM: ${file(config.json):NEXMO_SMS_FROM}

  # you can overwrite defaults here
  #  stage: dev
  region: eu-west-2

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : ${file(config.json):BUCKET}
#    - Effect: "Allow"
#      Action:
#        - "dynamodb:PutItem"
#      Resource:
#        Fn::Join:
#         - ""
#         - - "arn:aws:dynamodb:::"
#            - "Ref" : ${self:provider.environment.DYNAMODB_TABLE}

#Resource: { "Fn::Join" : ["", ["arn:aws:dynamodb:::", { "Ref" : ${self:provider.environment.DYNAMODB_TABLE} } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  shortener:
    handler: shortener/handler.shortener
    # I need this variable to set up dinamically the webhook for DLR SMS. Example https://3ip3eoi6hk.execute-api.eu-west-2.amazonaws.com/dev
    environment:
      SERVICE_ENDPOINT: ${cf:${self:service}-${self:provider.stage}.ServiceEndpoint}
    events:
      - http:
          path: shortener/send
          method: post
          cors: true
  getsmslist:
    handler: get-sms-list/handler.getSmsList
    events:
      - http:
          path: shortener/sms-list
          method: get
          cors: true
  messagestatus:
    handler: hooks/handler.messageStatus
    events:
      - http:
          path: shortener/hook/message-status
          method: post
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details

#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
resources:
  Resources:
    ShortenerUrl:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: creationDate
            AttributeType: S
          - AttributeName: messageId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: ${file(config.json):DYNAMODB_TABLE_INDEX}
            KeySchema:
              - AttributeName: messageId
                KeyType: HASH
              - AttributeName: creationDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    ServerlessRedirectS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${file(config.json):BUCKET}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
    ServerlessRedirectS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${file(config.json):BUCKET}
        PolicyDocument:
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Resource:
                - arn:aws:s3:::${file(config.json):BUCKET}/*
              Principal: "*"
